{"name":"Php-ddd-cargo-sample","tagline":"PHP Version of the cargo sample used in Eric Evans DDD book","body":"php-ddd-cargo-sample\r\n====================\r\n\r\nPHP 5.4+ port of the cargo sample used in Eric Evans Domain-Driven Design book\r\n\r\n[![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/codeliner/php-ddd-cargo-sample/badges/quality-score.png?s=d68042d97e40904ec369e137b60a1076509298f8)](https://scrutinizer-ci.com/g/codeliner/php-ddd-cargo-sample/)\r\n[![Build Status](https://travis-ci.org/codeliner/php-ddd-cargo-sample.png?branch=master)](https://travis-ci.org/codeliner/php-ddd-cargo-sample)\r\n\r\nGoal of the Project\r\n-------------------\r\nWe want to show the PHP way of implementing Domain-Driven Design with the help of\r\nthe original Cargo sample used in Eric Evans book\r\n`Domain-Driven Design: Tackling Complexity in the Heart of Software`.\r\nThis has already been done using java and a C# version is also available.\r\n\r\nIt is not the one way to apply DDD, but should help you understand the theory\r\nand gives you a starting point. Also see the [Caveats](http://dddsample.sourceforge.net/) of the \r\njava implementation. The same applies for our version. \r\n\r\n<b>The PHP port is work in progress. Your welcome to fork the repo and help finishing the cargo sample application.</b>\r\n\r\nThe application layer is based on ZF2 and we use Doctrine2 to persist our aggregates.\r\nThis would be a common combination in a large PHP project but both frameworks are not required. They just make our life easier and let us focus on the Domain-Driven Design implementation. Both can be replaced with any other PHP based components.\r\n\r\nIterative Implementation\r\n------------------------\r\nTo go with you when you read the book, our sample has a [release of each chapter](https://github.com/codeliner/php-ddd-cargo-sample#chapter-overview). So you can\r\nsimply `git checkout ChapterOne` and you only get the starting view of the domain\r\nwith just to entities `Cargo` and `Voyage`. Our application evolves chapter by chapter\r\nthe more knowledge we get about the domain. Each chapter ships with it's own review, where you can find additional information about the implementation, tips and tricks and many more.\r\n\r\n+ [Installation](https://github.com/codeliner/php-ddd-cargo-sample/blob/master/docs/installation.md)\r\n+ [DDD Tools and Libs](https://github.com/codeliner/php-ddd-cargo-sample/blob/master/docs/domain-driven-design-tools.md)\r\n\r\nProject Structure\r\n-----------------\r\nThere is no problem if you don't know the structure of a ZF2 application. All the important\r\nparts like the domain and the infrastructure implementation can be found in the [namespace](https://github.com/codeliner/php-ddd-cargo-sample/tree/master/module/Application/src/Application) of the application module.\r\n\r\nBehavior Driven Design\r\n----------------------\r\nAll features of the application are described in feature files. You can find them in\r\nthe [features folder](https://github.com/codeliner/php-ddd-cargo-sample/tree/master/features) of the project.\r\nWe make use of [Behat](http://behat.org/) and [Mink](http://mink.behat.org/) to test our\r\nbusiness expectations.\r\n\r\nUnit Tests\r\n----------\r\nUnit Tests are of course also available. You can find them in [module/Application/tests/PHPUnit](https://github.com/codeliner/php-ddd-cargo-sample/tree/master/module/Application/tests/PHPUnit).\r\nGot to the directory and simply run `phpunit`.\r\n\r\nSupport\r\n-------\r\nIf you have any problems with the application please let me know and send me an email `kontakt[at]codeliner[dot]ws` or open a [GitHub issue](https://github.com/codeliner/php-ddd-cargo-sample/issues?state=open).\r\nSame applies if you have a question or a feature wish.\r\nMaybe I've missed a concept that you hoped to find in the example.\r\n\r\nChapter Overview\r\n----------------\r\n\r\n###ChapterOne\r\n`git checkout ChapterOne`\r\n\r\nChapter One release contains the first draft of the Cargo DDD model.\r\nIt contains the Entities `Cargo` and `Voyage` and also an `Application BookingService` that works with an `overbooking policy`\r\nto allow the booking of a Cargo even when the Voyage has not enough free capacity.\r\n\r\n[ChapterOne Review](https://github.com/codeliner/php-ddd-cargo-sample/blob/master/docs/ChapterOne-Review.md)\r\n###ChapterTwo\r\n`git checkout ChapterTwo`\r\n\r\nIn Chapter Two we learn the importance of the Ubiquitous Language. With it's help the team works out a Cargo Router and redefines the use cases for the Shipping Application. The `Application BookingService` is replaced with a `Application RoutingService`, cause the system focuses on planing an `Itinerary` for a `Cargo` that satisfies a `RouteSpecification`.\r\n\r\n[ChapterTwo Review](https://github.com/codeliner/php-ddd-cargo-sample/blob/master/docs/ChapterTwo-Review.md)\r\n\r\n###ChapterThree\r\n`git checkout ChapterThree`\r\n\r\nChapterThree is about Model-Driven Design.\r\n\r\n> \"Design a portion of the software system to reflect the domain model in a very literal way, so that\r\n> mapping is obvious. Revisit the model and modify it to be implemented more naturally in software,\r\n> even as you seek to make it reflect deeper insight into the domain. Demand a single model that\r\n> serves both purposes well, in addition to supporting a robust UBIQUITOUS LANGUAGE.\r\n> Draw from the model the terminology used in the design and the basic assignment of responsibilities.\r\n> The code becomes an expression of the model, so a change to the code may be a change to the\r\n> model. Its effect must ripple through the rest of the project's activities accordingly.\"\r\n>\r\n> -- Eric Evans: Domain-Driven Design: Tackling Complexity in the Heart of Software\r\n\r\n[ChapterThree Review](https://github.com/codeliner/php-ddd-cargo-sample/blob/master/docs/ChapterThree-Review.md)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}